import re

from hashlib import sha256

from vFense.plugins.patching import AppsKeys
from vFense.plugins.patching._constants import CommonSeverityKeys


def build_app_id(name, version):
    """ Return the 64 character hexdigest of the appid.
        The app_id is generated by creating a hexdigest based of the
        name and the version of the application.

    Args:
        app (dict): Dictionary containing the name and version of the
            application.

    Basic Usage:
        >>> from vFense.plugins.patching.utils import build_app_id
        >>> name = 'app_name'
        >>> version = '2.2.0'
        >>> build_app_id(name, version)

    Returns:
        String
        'bab72e94f26a0af32a8e1fc8eef732b99150fac9bc17a720dac06f5474b53f08'
    """
    app_id = name.encode('utf8') + version.encode('utf8')

    return sha256(app_id).hexdigest()


def build_agent_app_id(agent_id, app_id):
    """ Return the 64 character hexdigest of the
        appid and agentid combined

    Args:
        agent_id (str): The 36 character UUID of the agent.
        app_id (str): The 64 character hexdigest of the app id

    Basic Usage:
        >>> vFense.plugins.patching.patching import build_agent_app_id
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> build_agent_app_id(agent_id, app_id)

    Returns:
        String
        '0009281d779a37cc73919656f6575de471237c3ed99f585160708defe8396d3d'
    """
    agent_app_id = agent_id.encode('utf8') + app_id.encode('utf8')

    return sha256(agent_app_id).hexdigest()


def get_proper_severity(severity):

    if re.search(r'Critical|Important|Security', severity, re.IGNORECASE):
        return CommonSeverityKeys.CRITICAL

    elif re.search(r'Recommended|Moderate|Low|Bugfix', severity, re.IGNORECASE):
        return CommonSeverityKeys.RECOMMENDED

    return CommonSeverityKeys.OPTIONAL

